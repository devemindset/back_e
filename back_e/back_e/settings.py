"""
Django settings for back_e project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
from celery.schedules import crontab
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
PLACE = config("PLACE",default="dev_place")

if PLACE == "dev_place":
    DEBUG =True
else :
    DEBUG = False

if DEBUG :
    ALLOWED_HOSTS = ["localhost", "127.0.0.1",]
else:    
    ALLOWED_HOSTS = [
        config("FRONTEND_DOMAIN",default= ""),
        config("FRONTEND_DOMAIN_WWW",default= ""),
        config("BACKEND_DOMAIN",default= ""),
    
    ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    "corsheaders",
    "storages",
    "custom_user",
    "payment",
    'django_celery_beat',
    "anymail",
    "products",
    "cart",
    "orders",


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTH_USER_MODEL = "custom_user.CustomUser"

ROOT_URLCONF = 'back_e.urls'

if not DEBUG:
    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'back_e.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',  # Database file stored in the project directory
    }
}
else:
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('POSTGRES_DB'),
        'USER': config('POSTGRES_USER'),
        'PASSWORD': config('POSTGRES_PASSWORD'),
        'HOST': config('POSTGRES_HOST', default ='localhost'),
        'PORT': config('POSTGRES_PORT', default = '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

if DEBUG:  
    STATIC_URL = 'static/'
    STATIC_ROOT = os.path.join(BASE_DIR,'static/')
    # DEBU MODE 
    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR,"media/")
else:
    # AWS configuration
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_SIGNATURE_VERSION = config("AWS_S3_SIGNATURE_VERSION",default="s3v4")
    #AWS_PRESIGNED_EXPIRY = config("AWS_PRESIGNED_EXPIRY",default= 300)
    S3_BUCKET_URL = config("S3_BUCKET_URL")
    AWS_S3_VERIFY = True
    #AWS_S3_OBJECT_PARAMETERS = {
    #    "CacheControl" : "max-age=86400"
    #}
    AWS_QUERYSTRING_AUTH = False
    AWS_HEADERS = {
        "Access-Control-Allow-Origin" : "*"
    }
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"
    # DEFAULT_FILE_STORAGE = "back_e.storage_backend.storage_backend.MediaStorage"

    STATICFILES_STORAGE = "storages.backends.s3boto3.S3StaticStorage"
    AWS_LOCATION = "static/"
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR,"static"),
    ]

    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}'

    STORAGES = {
    "default": {
        "BACKEND": "back_e.storage_backend.storage_backend.MediaStorage",  # ou ton chemin réel
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
    }
    }
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_QUERYSTRING_AUTH = False  # Permet d’accéder aux fichiers sans token

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",  # Local frontend during development
        "http://127.0.0.1:3000",  # Localhost with explicit IP
    ]
    # csrf trusted conf
    CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000", 
    ]
else:
    CORS_ALLOWED_ORIGINS = [
        config("DROP_URL_FRONT"),
        config("DROP_URL_FRONT_WWW"),
        
    ]

    CSRF_TRUSTED_ORIGINS = [
        config("DROP_URL_FRONT"),
        config("DROP_URL_BACKEND"),
        config("DROP_URL_FRONT_WWW"),

        
    ]

CORS_ALLOW_CREDENTIALS = True # Allow cookies (sessions)




# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Store sessions in DB
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie
if DEBUG:
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SAMESITE = 'Lax'
else:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = 'None'
    CSRF_COOKIE_SAMESITE = 'None'
    SESSION_COOKIE_DOMAIN = config("PREFIX_WITH_DOT", default="")
    CSRF_COOKIE_DOMAIN = config("PREFIX_WITH_DOT", default="")

# SESSION_COOKIE_AGE = 1209600    # 2 weeks expiry (adjust as needed)

#stripe config
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY")



# CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/0")
# CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "redis://redis:6379/1")

# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'

# CELERY_IMPORTS = ('monitoring.tasks',)

# CELERY_BEAT_SCHEDULE = {
#     'run-monitoring-every-5-minutes': {
#         'task': 'monitoring.tasks.run_monitoring_checks',
#         'schedule': crontab(minute=0, hour=0, day_of_month=1),
#     },
#     'daily-seo-scan': {
#         'task': 'monitoring.tasks.run_daily_seo_scan',
#         'schedule': crontab(minute=0, hour=0, day_of_month=2),
#     },
#     'retry-failed-seo-scans': {
#         'task': 'monitoring.tasks.retry_failed_seo_scans',
#         'schedule': crontab(minute=0, hour=0, day_of_month=3),
#     },
# }



# CELERY_TIMEZONE = 'UTC'

# CELERY_BEAT_SCHEDULE_FILENAME = os.environ.get("CELERY_BEAT_SCHEDULE_FILENAME", "celerybeat-schedule")



# email settings 

EMAIL_BACKEND = "anymail.backends.sendgrid.EmailBackend"

# ANYMAIL = {
#     "SENDGRID_API_KEY": config("SENDGRID_API_KEY"),
# }

# DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")

# CONTACT_RECEIVER_EMAIL=config("CONTACT_RECEIVER_EMAIL")


REST_FRAMEWORK = {
    
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
     
    ),
}
